{"version":3,"file":"static/chunks/pages/profiles/[address]/items/[id]-86913472c701f643.js","mappings":"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","sources":["webpack://_N_E/?2136","webpack://_N_E/./src/hooks/useApiListing.js","webpack://_N_E/./src/components/ListItemInsufficientFundsWarning.jsx","webpack://_N_E/./src/components/ListItemPageButtons.jsx","webpack://_N_E/./src/hooks/useItemPurchase.js","webpack://_N_E/./src/hooks/useItemRemoval.js","webpack://_N_E/./src/components/SellListItem.jsx","webpack://_N_E/./src/hooks/useItemSale.js","webpack://_N_E/./src/components/AccountItemNotFoundMessage.jsx","webpack://_N_E/./pages/profiles/[address]/items/[id].jsx","webpack://_N_E/./src/components/RarityScale.jsx","webpack://_N_E/./src/components/TransactionLoading.jsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/profiles/[address]/items/[id]\",\n      function () {\n        return require(\"private-next-pages/profiles/[address]/items/[id].jsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/profiles/[address]/items/[id]\"])\n      });\n    }\n  ","import PropTypes from \"prop-types\"\nimport {paths} from \"src/global/constants\"\nimport fetcher from \"src/util/fetcher\"\nimport {normalizeApiListing} from \"src/util/normalize-item\"\nimport useSWR from \"swr\"\n\nexport default function useApiListing(itemID, path, options = {}) {\n  path ||= typeof itemID !== \"undefined\" ? paths.apiListing(itemID) : null\n  const {data, error} = useSWR(path, fetcher, options)\n  const listing =\n    Array.isArray(data) && data.length > 0\n      ? normalizeApiListing(data[0])\n      : undefined\n  return {listing, error, isLoading: !data && !error}\n}\n\nuseApiListing.propTypes = {\n  id: PropTypes.string,\n}\n","import {CHAIN_ENV_EMULATOR} from \"src/global/constants\"\nimport publicConfig from \"src/global/publicConfig\"\n\nexport default function ListItemInsufficientFundsWarning() {\n  return (\n    <div className=\"mt-2 text-sm text-center text-gray-600\">\n      {publicConfig.chainEnv === CHAIN_ENV_EMULATOR ? (\n        <div>\n          Insufficient funds, add some FLOW from the dev wallet account page\n        </div>\n      ) : (\n        <a\n          href=\"https://testnet-faucet.onflow.org/fund-account\"\n          className=\"mx-1 font-bold underline hover:opacity-80\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          Get some FLOW\n        </a>\n      )}\n      to purchase this Kitty Item.\n    </div>\n  )\n}\n","import {useRouter} from \"next/dist/client/router\"\nimport Button from \"src/components/Button\"\nimport publicConfig from \"src/global/publicConfig\"\nimport {normalizedItemType} from \"src/global/types\"\nimport useAppContext from \"src/hooks/useAppContext\"\nimport useFLOWBalance from \"src/hooks/useFLOWBalance\"\nimport useItemPurchase from \"src/hooks/useItemPurchase\"\nimport useItemRemoval from \"src/hooks/useItemRemoval\"\nimport ListItemInsufficientFundsWarning from \"./ListItemInsufficientFundsWarning\"\nimport TransactionLoading from \"./TransactionLoading\"\n\nexport default function ListItemPageButtons({item}) {\n  const router = useRouter()\n  const {address, id} = router.query\n  const {currentUser} = useAppContext()\n  const {data: flowBalance} = useFLOWBalance(currentUser?.addr)\n\n  const [purchase, purchaseTx] = useItemPurchase(id)\n  const [remove, removeTx] = useItemRemoval(id)\n  const onPurchaseClick = () =>\n    purchase(item.listingResourceID, item.name, address)\n  const onRemoveClick = () => remove(item)\n\n  const hasListing = Number.isInteger(item.listingResourceID)\n  const currentUserIsOwner = !!currentUser && item.owner === currentUser?.addr\n  const isBuyable = hasListing && !currentUserIsOwner\n  const isRemovable = currentUserIsOwner && hasListing\n\n  // TODO: Use a library that supports UFix64 precision to avoid comparing rounded numbers\n  const userHasEnoughFunds =\n    hasListing && parseFloat(item.price) <= parseFloat(flowBalance)\n\n  if (isBuyable) {\n    return (\n      <div>\n        {!!purchaseTx ? (\n          <TransactionLoading status={purchaseTx.status} />\n        ) : (\n          <Button\n            onClick={onPurchaseClick}\n            disabled={!!currentUser && !userHasEnoughFunds}\n            roundedFull={true}\n          >\n            Purchase\n          </Button>\n        )}\n\n        {!!currentUser && !userHasEnoughFunds && (\n          <ListItemInsufficientFundsWarning />\n        )}\n      </div>\n    )\n  }\n\n  if (isRemovable) {\n    const location =\n      item.owner === publicConfig.flowAddress ? \"Store\" : \"Marketplace\"\n\n    return (\n      <div>\n        {!!removeTx ? (\n          <TransactionLoading status={removeTx.status} />\n        ) : (\n          <Button onClick={onRemoveClick} color=\"gray\" roundedFull={true}>\n            {`Remove From ${location}`}\n          </Button>\n        )}\n      </div>\n    )\n  }\n\n  return null\n}\n\nListItemPageButtons.propTypes = {\n  item: normalizedItemType,\n}\n","import * as fcl from \"@onflow/fcl\"\nimport PURCHASE_LISTING_TRANSACTION from \"cadence/transactions/purchase_listing.cdc\"\nimport {useRouter} from \"next/dist/client/router\"\nimport {useEffect, useState} from \"react\"\nimport useTransactionsContext from \"src/components/Transactions/useTransactionsContext\"\nimport {isSealed, isSuccessful} from \"src/components/Transactions/utils\"\nimport {paths} from \"src/global/constants\"\nimport {useSWRConfig} from \"swr\"\nimport useAppContext from \"./useAppContext\"\nimport analytics from \"src/global/analytics\"\n\nexport default function useItemPurchase(itemID) {\n  const router = useRouter()\n  const {currentUser} = useAppContext()\n  const {addTransaction, transactionsById} = useTransactionsContext()\n  const {mutate, cache} = useSWRConfig()\n  const [txId, setTxId] = useState()\n  const tx = transactionsById[txId]?.data\n\n  const purchase = async (listingResourceID, itemName, ownerAddress) => {\n    if (!listingResourceID) throw new Error(\"Missing listingResourceID\")\n    if (!ownerAddress) throw new Error(\"Missing ownerAddress\")\n\n    const newTxId = await fcl.mutate({\n      cadence: PURCHASE_LISTING_TRANSACTION,\n      args: (arg, t) => [\n        arg(listingResourceID.toString(), t.UInt64),\n        arg(ownerAddress, t.Address),\n      ],\n      limit: 1000,\n    })\n    setTxId(newTxId)\n    addTransaction({\n      id: newTxId,\n      title: `Purchase ${itemName} #${itemID}`,\n    })\n  }\n\n  useEffect(() => {\n    if (!!currentUser && isSuccessful(tx)) {\n      analytics.track(\"kitty-items-item-sale-primary\", {params: {itemID}})\n      mutate(currentUser.addr)\n      cache.delete(paths.apiListing(itemID))\n      router.push(paths.profileItem(currentUser.addr, itemID))\n    } else if (isSealed(tx)) {\n      setTxId(null)\n    }\n  }, [cache, currentUser, itemID, mutate, router, tx])\n\n  return [purchase, tx]\n}\n","import * as fcl from \"@onflow/fcl\"\nimport REMOVE_LISTING_TRANSACTION from \"cadence/transactions/remove_listing.cdc\"\nimport {useEffect, useState} from \"react\"\nimport useTransactionsContext from \"src/components/Transactions/useTransactionsContext\"\nimport {isSuccessful} from \"src/components/Transactions/utils\"\nimport {paths} from \"src/global/constants\"\nimport useApiListing from \"./useApiListing\"\n\nexport default function useItemRemoval(itemID) {\n  const {addTransaction, transactionsById} = useTransactionsContext()\n  const [txId, setTxId] = useState()\n  const tx = transactionsById[txId]?.data\n\n  // Poll for removed api listing once tx is successful\n  const {listing} = useApiListing(\n    itemID,\n    () => (!!isSuccessful(tx) ? paths.apiListing(itemID) : null),\n    {\n      refreshInterval: 1000,\n    }\n  )\n\n  const remove = async ({listingResourceID, owner, name}) => {\n    if (!listingResourceID) throw new Error(\"Missing listingResourceID\")\n\n    const newTxId = await fcl.mutate({\n      cadence: REMOVE_LISTING_TRANSACTION,\n      args: (arg, t) => [arg(listingResourceID.toString(), t.UInt64)],\n      limit: 1000,\n    })\n\n    setTxId(newTxId)\n    addTransaction({\n      id: newTxId,\n      url: paths.profileItem(owner, itemID),\n      title: `Remove ${name} #${itemID}`,\n    })\n  }\n\n  useEffect(() => {\n    if (!listing) setTxId(null)\n  }, [listing])\n\n  return [remove, tx]\n}\n","import {useState} from \"react\"\nimport Button from \"src/components/Button\"\nimport {ITEM_RARITY_PRICE_MAP} from \"src/global/constants\"\nimport {normalizedItemType} from \"src/global/types\"\nimport useItemSale from \"src/hooks/useItemSale\"\nimport {formattedCurrency} from \"src/util/currency\"\nimport TextInput from \"./TextInput\"\nimport TransactionLoading from \"./TransactionLoading\"\n\nexport default function SellListItem({item}) {\n  const [sell, tx] = useItemSale(item.itemID)\n  const [price, setPrice] = useState(\"\")\n\n  const onSubmit = e => {\n    e.preventDefault()\n    sell(item, price)\n  }\n\n  return (\n    <div data-cy=\"sell-list-item\">\n      <div className=\"text-gray mb-5\">\n        <div className=\"font-bold\">\n          Items of this rarity usually sell for{\" \"}\n          {formattedCurrency(ITEM_RARITY_PRICE_MAP[item.rarity].toString())}{\" \"}\n          FLOW.\n        </div>\n        Please specify the price you want to sell your Kitty Item for.\n      </div>\n\n      {!!tx ? (\n        <TransactionLoading status={tx.status} />\n      ) : (\n        <div className=\"bg-white border border-gray-200 rounded px-8 pt-5 pb-7\">\n          <form onSubmit={onSubmit}>\n            <TextInput\n              value={price}\n              onChange={setPrice}\n              type=\"number\"\n              min=\"0\"\n              required={true}\n              placeholder=\"0.00\"\n              label=\"Price\"\n              inputClassName=\"text-right pr-4\"\n              step=\"any\"\n            />\n            <Button\n              type=\"submit\"\n              disabled={!price}\n              roundedFull={true}\n              className=\"mt-5\"\n            >\n              List My Kitty Kitem\n            </Button>\n          </form>\n        </div>\n      )}\n    </div>\n  )\n}\n\nSellListItem.propTypes = {\n  item: normalizedItemType,\n}\n","import * as fcl from \"@onflow/fcl\"\nimport CREATE_LISTING_TRANSACTION from \"cadence/transactions/create_listing.cdc\"\nimport {useEffect, useState} from \"react\"\nimport useTransactionsContext from \"src/components/Transactions/useTransactionsContext\"\nimport {isSuccessful} from \"src/components/Transactions/utils\"\nimport {paths} from \"src/global/constants\"\nimport {uFix64String} from \"src/util/currency\"\nimport {\n  EVENT_LISTING_AVAILABLE,\n  getStorefrontEventByType,\n} from \"src/util/events\"\nimport useApiListing from \"./useApiListing\"\nimport analytics from \"src/global/analytics\"\n\nexport function extractApiListingFromEvents(events, item) {\n  const event = getStorefrontEventByType(events, EVENT_LISTING_AVAILABLE)\n  if (!event) return undefined\n\n  return {\n    item_id: event.data.nftID,\n    listing_resource_id: event.data.listingResourceID,\n    item_kind: item.kind,\n    item_rarity: item.rarity,\n    owner: item.owner,\n    name: item.name,\n    image: item.image,\n    price: event.data.price,\n    transaction_id: event.transactionId,\n  }\n}\n\nexport default function useItemSale(itemID) {\n  const {addTransaction, transactionsById} = useTransactionsContext()\n  const [txId, setTxId] = useState()\n  const tx = transactionsById[txId]?.data\n\n  // Poll for api listing once tx is successful\n  const {listing} = useApiListing(\n    itemID,\n    () => {\n      if (isSuccessful(tx)) {\n        analytics.track(\"kitty-items-item-listed\", {params: {itemID}})\n        return paths.apiListing(itemID)\n      }\n      return null\n    },\n    {\n      refreshInterval: 1000,\n    }\n  )\n\n  const sell = async (item, price) => {\n    if (!item) throw new Error(\"Missing item\")\n    if (!price) throw new Error(\"Missing price\")\n\n    const newTxId = await fcl.mutate({\n      cadence: CREATE_LISTING_TRANSACTION,\n      args: (arg, t) => [\n        arg(item.itemID.toString(), t.UInt64),\n        arg(uFix64String(price), t.UFix64),\n      ],\n      limit: 1000,\n    })\n\n    addTransaction({\n      id: newTxId,\n      url: paths.profileItem(item.owner, item.itemID),\n      title: `List ${item.name} #${item.itemID}`,\n    })\n    setTxId(newTxId)\n  }\n\n  useEffect(() => {\n    if (!!listing) setTxId(null)\n  }, [listing])\n\n  return [sell, tx]\n}\n","import {paths} from \"src/global/constants\"\nimport {ButtonLink} from \"./Button\"\n\nexport default function AccountItemNotFoundMessage(args) {\n  const message = `Unable to find Kitty Item: #${args.itemID} for account ${args.accountID}`\n\n  return (\n    <div className=\"flex justify-center my-12 text-center\">\n      <div className=\"bg-white border border-gray-200 p-6 w-[32rem] rounded-md inline-flex flex-col justify-center\">\n        <div className=\"bg-white border border-gray-200 p-6 rounded-md inline-flex flex-col justify-center\">\n          <b>{message}</b>\n\n          <p className=\"text-gray-light mt-1\">\n            The Kitty Item you are looking for may be owned by a different\n            account or not yet minted!\n          </p>\n\n          <hr className=\"mt-8 mb-6\" />\n          <b>Learn more about Kitty Items</b>\n          <p className=\"text-gray-light mb-5 mt-1 max-w-xs mx-auto\">\n            Learn more about the key components and services that make Kitty\n            Items possible.\n          </p>\n\n          <ButtonLink href={paths.githubRepo} target=\"_blank\" color=\"outline\">\n            VIEW DOCUMENTATION &amp; RESOURCES\n          </ButtonLink>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import {useRouter} from \"next/dist/client/router\"\nimport ListItemImage from \"src/components/ListItemImage\"\nimport ListItemPageButtons from \"src/components/ListItemPageButtons\"\nimport ListItemPrice from \"src/components/ListItemPrice\"\nimport OwnerInfo from \"src/components/OwnerInfo\"\nimport PageTitle from \"src/components/PageTitle\"\nimport RarityScale from \"src/components/RarityScale\"\nimport SellListItem from \"src/components/SellListItem\"\nimport useAccountItem from \"src/hooks/useAccountItem\"\nimport useApiListing from \"src/hooks/useApiListing\"\nimport useAppContext from \"src/hooks/useAppContext\"\nimport AccountItemNotFoundMessage from \"src/components/AccountItemNotFoundMessage\"\n\nexport default function KittyItem() {\n  const router = useRouter()\n  const {currentUser} = useAppContext()\n  const {address, id} = router.query\n  const {listing} = useApiListing(id)\n  const {item} = useAccountItem(address, id, listing)\n  const currentUserIsOwner =\n    currentUser && item?.owner && item.owner === currentUser?.addr\n  const isSellable = currentUserIsOwner && !listing\n\n  return (\n    <div className=\"main-container pt-12 pb-24 w-full\">\n      <PageTitle>{[\"Kitty Item\", id].filter(Boolean).join(\" \")}</PageTitle>\n      <main>\n        {!!item ? (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 md:gap-x-14\">\n            <ListItemImage\n              name={item?.name}\n              rarity={item?.rarity}\n              cid={item?.image}\n              address={item?.owner}\n              id={item?.itemID}\n              size=\"lg\"\n            />\n            <div className=\"pt-20\">\n              <OwnerInfo address={item.owner} size=\"lg\" />\n              <h1\n                className=\"text-5xl text-gray-darkest mt-10 mb-6\"\n                data-cy=\"minted-item-name\"\n              >\n                {item.name}\n              </h1>\n              {isSellable ? (\n                <SellListItem item={item} />\n              ) : (\n                <>\n                  <div className=\"flex items-center h-6\">\n                    {!!listing && (\n                      <div className=\"mr-5\">\n                        <ListItemPrice price={listing.price} />\n                      </div>\n                    )}\n                    <div className=\"font-mono text-sm\">#{id}</div>\n                  </div>\n\n                  <div className=\"mt-8\">\n                    <RarityScale highlightedRarity={item.rarity} />\n                  </div>\n                  <ListItemPageButtons item={item} />\n                </>\n              )}\n            </div>\n          </div>\n        ) : (\n          <AccountItemNotFoundMessage itemID={id} accountID={address} />\n        )}\n      </main>\n    </div>\n  )\n}\n","import PropTypes from \"prop-types\"\nimport {ITEM_RARITY_MAP, ITEM_RARITY_PROBABILITIES} from \"src/global/constants\"\nimport {itemGradientClass} from \"src/util/classes\"\n\nexport default function RarityScale({highlightedRarity}) {\n  return (\n    <div className=\"mb-10 text-gray-light text-sm\" data-cy=\"rarity-scale\">\n      <div className=\"flex justify-between items-center uppercase font-bold text-xs pb-2 px-2\">\n        <div>Rarity Scale</div>\n        <div>Minting Chance</div>\n      </div>\n      {Object.keys(ITEM_RARITY_MAP)\n        .reverse()\n        .map(key => (\n          <div\n            key={key}\n            className={`flex items-center border-t border-gray-200 py-1 px-2 ${\n              Number(highlightedRarity) === Number(key) ? \"bg-gray-200\" : \"\"\n            }`}\n          >\n            <div\n              className={`${itemGradientClass(\n                key\n              )} w-2.5 h-2.5 rounded-full mr-3`}\n            />\n            <div className=\"\">{ITEM_RARITY_MAP[key]}</div>\n            <div className=\"ml-auto text-gray-darkest\">\n              {ITEM_RARITY_PROBABILITIES[key]}%\n            </div>\n          </div>\n        ))}\n    </div>\n  )\n}\n\nRarityScale.propTypes = {\n  highlightedRarity: PropTypes.number,\n}\n","import PropTypes from \"prop-types\"\nimport {TRANSACTION_STATUS_MAP} from \"src/global/constants\"\n\nexport default function TransactionLoading({status}) {\n  return (\n    <div\n      className=\"flex flex-col items-center justify-center bg-white pt-12 pb-11 border border-gray-200 rounded-sm text-gray-lightest text-xs uppercase\"\n      data-cy=\"tx-loading\"\n    >\n      <img src=\"/images/loading.svg\" alt=\"Flow\" width={70} height={70} />\n      <div className=\"mt-4\">\n        {TRANSACTION_STATUS_MAP[status] || \"Initializing\"}\n      </div>\n    </div>\n  )\n}\n\nTransactionLoading.propTypes = {\n  status: PropTypes.number,\n}\n"],"names":["window","__NEXT_P","push","useApiListing","itemID","path","options","paths","useSWR","fetcher","data","error","listing","Array","isArray","length","normalizeApiListing","undefined","isLoading","ListItemInsufficientFundsWarning","div","className","publicConfig","CHAIN_ENV_EMULATOR","a","href","rel","target","propTypes","id","PropTypes","ListItemPageButtons","item","router","useRouter","query","address","useAppContext","currentUser","useFLOWBalance","addr","useItemPurchase","transactionsById","useTransactionsContext","addTransaction","useSWRConfig","mutate","cache","useState","txId","setTxId","tx","purchase","listingResourceID","itemName","ownerAddress","newTxId","Error","fcl","cadence","args","arg","t","toString","UInt64","Address","limit","title","useEffect","isSuccessful","analytics","params","delete","isSealed","purchaseTx","useItemRemoval","refreshInterval","remove","owner","name","url","removeTx","hasListing","Number","isInteger","currentUserIsOwner","isBuyable","isRemovable","userHasEnoughFunds","parseFloat","price","flowBalance","TransactionLoading","status","Button","onClick","disabled","roundedFull","location","color","normalizedItemType","SellListItem","useItemSale","sell","uFix64String","UFix64","setPrice","data-cy","formattedCurrency","ITEM_RARITY_PRICE_MAP","rarity","form","onSubmit","e","preventDefault","TextInput","value","onChange","type","min","required","placeholder","label","inputClassName","step","AccountItemNotFoundMessage","message","accountID","b","p","hr","ButtonLink","KittyItem","useAccountItem","isSellable","PageTitle","filter","Boolean","join","main","ListItemImage","cid","image","size","OwnerInfo","h1","ListItemPrice","RarityScale","highlightedRarity","Object","keys","ITEM_RARITY_MAP","reverse","map","key","itemGradientClass","ITEM_RARITY_PROBABILITIES","img","src","alt","width","height","TRANSACTION_STATUS_MAP"],"sourceRoot":""}